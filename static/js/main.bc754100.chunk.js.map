{"version":3,"sources":["GetMovies.tsx","Home.tsx","Favorites.tsx","MovieInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["movieApiKey","process","GetMovies","year","genre","rating","console","log","axios","get","then","response","data","results","Home","addFavorite","useState","date","getDate","titles","getTitles","getRating","movies","getMovies","genres","getGenre","selectGenre","setSelectGenre","useEffect","id","className","onSubmit","e","preventDefault","name","onChange","target","value","map","type","movie","i","title","release_date","vote_average","onClick","to","Favorites","favorite","handleDelete","MovieInfo","parseInt","useParams","movieId","src","poster_path","alt","overview","App","setFavorite","path","element","prevFavorite","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc754100.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Movie } from \"./MovieInterface\";\nimport Genre from \"./GenreInterface\";\n\nconst movieApiKey : string = process.env.REACT_APP_MOVIE_API_CREDS || '';\n\n// general function for getting all movies with KB\n// as well as getting year/date\n\nexport function GetMovies(year?: string, genre?: string, rating?: string) : Promise<Movie[]>{\n    console.log(genre)\n    return axios\n        .get(`https://api.themoviedb.org/3/discover/movie?api_key=${movieApiKey}&language=en-US&sort_by=release_date.desc&include_adult=false&include_video=false&page=1&with_people=4724&primary_release_year=${year}&with_genres=${genre}&vote_average.gte=${rating}`)\n        .then(response => {console.log(response.data.results)\n            return response.data.results\n    })\n};\n\n// potential function for keyword title search?\n\n// export function KeywordSearch() : Promise<Movie[]> {\n//     return axios\n//         .get(`https://api.themoviedb.org/3/search/keyword?api_key=${movieApiKey}&query=http%3A%2F%2Flocalhost%3A3000%2F&page=1`)\n//         .then(response => {console.log(response.data.results)\n//             return response.data.results\n//         })\n// };\n\nexport function TitleSearch(title: string) : Promise<Movie[]> {\n    return axios\n        .get(`https://api.themoviedb.org/3/search/movie?api_key=${movieApiKey}&language=en-US&query=${title}&include_adult=false`)\n        .then(response => {console.log(response.data.results)\n            return response.data.results\n    })\n}\n\n// potential function for getting genre?\n\nexport function GenreSearch() : Promise<Genre[]> {\n    return axios\n        .get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${movieApiKey}&language=en-US`)\n        .then(response => {console.log(response.data.genres)\n            return response.data.genres\n        })\n};\n\nexport default GetMovies;","import { Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { GetMovies, GenreSearch, TitleSearch } from \"./GetMovies\";\nimport { Movie } from \"./MovieInterface\";\nimport Genre from \"./GenreInterface\";\n\nfunction Home({ addFavorite }: { addFavorite: (movie: Movie) => void }) {\n  const [date, getDate] = useState(\"\");\n  const [titles, getTitles] = useState(\"\");\n  const [rating, getRating] = useState(\"\");\n  const [movies, getMovies] = useState<Movie[]>([]);\n  const [genres, getGenre] = useState<Genre[]>([]);\n  const [selectGenre, setSelectGenre] = useState(\"\");\n\n  useEffect(() => {\n    GenreSearch().then((genre) => {\n      getGenre(genre);\n    });\n  }, []);\n\n  return (\n    <div id=\"body\">\n      <h4 id=\"description\">\n        Kevin Bacon has appeared in at least 61 movies. Search for your favorite\n        films and add them to your list below.\n      </h4>\n\n      <h2>Find a Kevin:</h2>\n      <form\n        className=\"searchTitle\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          console.log(selectGenre);\n          GetMovies(date, selectGenre, rating).then((response) => {\n            getMovies(response);\n          });\n          //   getDate(\"\");\n        }}\n      >\n        <label>\n          <strong> Genre: </strong>\n          {/* pulls the information from api/id\n                    to display the genre and\n                    then finds the information to display\n                    the correct genre when selected\n                    STILL NEEDS WORK */}\n          <select\n            id=\"genres\"\n            name=\"genres\"\n            onChange={(e) => {\n            \n              console.log(e.target.value);\n              setSelectGenre(e.target.value);\n            }}\n          >\n            <option> </option>\n            {genres.map((genre) => {\n              return <option value={genre.id}>{genre.name}</option>;\n            })}\n          </select>\n        </label>\n        <label>\n          <strong> Release Date: </strong>\n          {/* displays movies by date\n                    still needs work or\n                    more specification */}\n          <input\n            value={date}\n            onChange={(e) => getDate(e.target.value)}\n            name=\"date\"\n          />\n        </label>\n        <label>\n          <strong> Rating: </strong>\n          <input\n            value={rating}\n            onChange={(e) => {\n              getRating(e.target.value);\n            }}\n            name=\"rating\"\n          />\n        </label>\n        <button type=\"submit\">Search</button>\n        {/* <button type='submit'>Bacon Me</button> */}\n      </form>\n      <div id=\"results\">\n        {/* displays list of movies\n                per search criteria */}\n        <ul id=\"list-item\">\n          {movies.map((movie, i) => {\n            return (\n              <li>\n                <strong>Title: </strong>{movie.title} | <strong>Release Date: </strong>{movie.release_date} | <strong>Average Rating: </strong>{movie.vote_average} \n                <button\n                  type=\"submit\"\n                  onClick={() => {\n                    addFavorite(movie);\n                  }}\n                >\n                  Add to My Favorites\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n        <Link to=\"/favorite-bacon\">View My Favorites</Link>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n      </div>\n      <label>\n        <strong> Search Non-Bacon Movies: </strong>\n        <form\n          className=\"searchTitle\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            console.log(selectGenre);\n            TitleSearch(titles).then((response) => {\n              getMovies(response);\n            });\n            getDate(\"\");\n          }}\n        >\n          <input\n            value={titles}\n            onChange={(e) => getTitles(e.target.value)}\n            name=\"title\"\n          />\n          <button>Search</button>\n        </form>\n      </label>\n    </div>\n  );\n}\n\nexport default Home;\n","import { Link } from \"react-router-dom\";\nimport { Movie } from \"./MovieInterface\";\n\nfunction Favorites({ favorite, handleDelete } : { handleDelete: (i: number) => void, favorite: Movie[] }) {\n  return (\n    <div>\n      \n      <h1>My Favorite Kevins</h1>\n      <ul>\n        {favorite.map((movie, i) => {\n          return (\n            <li>\n              <Link to={`/movie-info/${i}`}>{movie.title}</Link> -{movie.release_date} -{movie.vote_average}\n              <button\n                type=\"submit\"\n                onClick={() => {\n                    handleDelete(i);\n                }}>\n                Delete\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n      <Link to=\"/\">Return Home</Link>\n    </div>\n  );\n}\n\nexport default Favorites;\n","import { useParams } from \"react-router\";\nimport { Movie } from \"./MovieInterface\";\nimport { Link } from \"react-router-dom\";\n\nfunction MovieInfo({ favorite} : {favorite: Movie[] }) {\n    \n\n    let id = parseInt(useParams().movieId as string);\n    let movie = favorite[id];\n\n    if(!movie) {\n        return(\n            <p>no.</p>\n        )\n    }else{\n\n    return (\n        <div>\n            <img src={`http://image.tmdb.org/t/p/w185/${movie.poster_path}`} alt={movie.title}></img>\n            <p>{movie.release_date}</p>\n            <p>Average rating: {movie.vote_average}</p>\n            <p>{movie.overview}</p>\n            <Link to='/'> Return Home</Link> <Link to='/favorite-bacon'>Return to Favorites</Link>\n\n        </div>\n    )\n    }\n}\n\nexport default MovieInfo;","import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport Favorites from \"./Favorites\";\nimport MovieInfo from \"./MovieInfo\";\nimport { Movie } from \"./MovieInterface\";\n\nfunction App() {\n  const [favorite, setFavorite] = useState<Movie[]>([]);\n\n  const addFavorite = (movie: Movie) => {\n    setFavorite((prevFavorite) => {\n      return [...prevFavorite, movie];\n    });\n  };\n\n  const handleDelete = (i: number) => {\n    setFavorite((prevFavorite) => {\n      return [...prevFavorite.slice(0, i), ...prevFavorite.slice(i + 1)];\n    });\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <div id=\"background\">\n          <header>\n            <h1 id=\"title\">KBDB</h1>\n            <h2 id=\"tagline\">The Kevin Bacon Database</h2>\n          </header>\n          <Routes>\n            <Route path=\"*\" element={<Home addFavorite={addFavorite} />} />\n            <Route\n              path=\"/favorite-bacon\"\n              element={\n                <Favorites favorite={favorite} handleDelete={handleDelete} />\n              }\n            />\n            <Route\n              path=\"/movie-info/:movieId\"\n              element={<MovieInfo favorite={favorite} />}\n            />\n          </Routes>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}